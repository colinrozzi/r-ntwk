#lang racket

(struct node-manager [node peer-nodes] #:transparent)

(struct peer-node [address])

(define (node-manager:make peer-nodes port received-channel sending-channel shutdown-channel)
  (node-manager (node:make port received-channel sending-channel shutdown-channel)
                peer-nodes
                '()))

(define (node-manager:run node-manager)
  (define active-node (node:run (node-manager-node node-manager)))

  ;say hello! whats up other nodes
  (send-on-network (node-manager-peer-nodes) hello-message)

  ;be a participant on the network
  )

(struct network-state [active-nodes events])

(define (node-manager-incoming node-manager)
  (node-incoming (node-manager-node node-manager)))

(define (active-network-operations node-manager)
  (let loop ([network-state (network-state:make)])
    (define received-event (async-channel-get (node-manager-incoming node-manager)))
    
    
    ;wait for a message to come in
    ;update the network state (#events, consensus, etc)
    ;check if any actions have to be taken with the new state
    ;call the loop with the new state))